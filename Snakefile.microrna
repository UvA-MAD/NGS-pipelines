########################################################################
#  microRNA mapping and counting workflow file
#  protocol specified in /mad/MAD-RBAB/
#     10_Protocols/DryLab/NGS_protocols/NGS_protocols_parameters_v3.xlsx
########################################################################

import os
from snakemake.utils import R

########################################################################
#   Parameters of the workflow  
########################################################################

# 3 letter code used to 
SPECIES="xxx"

if SPECIES == "xxx":
     sys.exit("Pipeline configuration error: SPECIES variable must be set.")

#Location of the project can be absolute of
#relative with regard to location of snakefile 
#We assume mad experiments with Scratch and Result 
#directories
EXPERIMENT_DIR = "../.." 

# Location of the input files and sample names 
FQ_DIR = os.path.join(EXPERIMENT_DIR,"Scratch/raw")
SAMPLES =  sorted([s[:-6] for s in os.listdir(FQ_DIR) if s.endswith(".fastq")])

# reference spike in sequences for small RNA experiments
SPIKES_REF = "/mad/MAD-RBAB/05_Reference-db/RBAB/spikes-smallRNAseq/SSPK_v3"

DIR_E = ".dexist"

RESULTS_DIR = os.path.join(EXPERIMENT_DIR,"Results/miRNAmapping")
SCRATCH_DIR = os.path.join(EXPERIMENT_DIR,"Scratch/miRNAmapping")
MAP_DIR     = os.path.join(SCRATCH_DIR,"mapped")
SPIKE_DIR   = os.path.join(SCRATCH_DIR,"spike")
NOSPIKE_DIR = os.path.join(SCRATCH_DIR,"nospike")
MIRNADB_DIR = os.path.join(SCRATCH_DIR,"miRNAdb")

#location of the miRNA sequences and their annotation (downloaded from mirbase)
MIRBASE_VERSION = "21"
miRNAfasta  = MIRNADB_DIR+"/Mirbase"+MIRBASE_VERSION+"_"+SPECIES+".fa"
miRNAgff    = MIRNADB_DIR+"/Mirbase"+MIRBASE_VERSION+"_"+SPECIES+".gff3"

REPORT_FILE = os.path.join(RESULTS_DIR,"miRNAmappingLog.txt")

REFERENCE_SMALLDERIVED = os.path.join(MIRNADB_DIR,"smallderived")
REFERENCE_ALLMATURE    = os.path.join(MIRNADB_DIR,"allmature")
REFERENCE_PREMATURE    = os.path.join(MIRNADB_DIR,"premature")

BOWTIE_PARAMS_SHR    = " -L 6 -i S,0,0.5 --norc  --rdg 1,6 --rfg 1,6 -p 8 "
BOWTIE_PARAMS_SPIKE  = BOWTIE_PARAMS_SHR + " --score-min L,-1,-0.6 "  
BOWTIE_PARAMS_MIRNA  = BOWTIE_PARAMS_SHR + " --score-min L,-0.0,-0.8 "


########################################################################
#                            rules 
########################################################################
rule all:
    input: 
       ("{spath}/{sample}_small2smallderived_counts.txt".format(sample=s,spath=RESULTS_DIR) for s in SAMPLES),
       ("{spath}/{sample}_large2premature_counts.txt".format(sample=s,spath=RESULTS_DIR) for s in SAMPLES),
       ("{spath}/{sample}_medium2allmature_counts.txt".format(sample=s,spath=RESULTS_DIR) for s in SAMPLES),
       os.path.join(RESULTS_DIR,"CountTable_norm_spike.txt"),
       os.path.join(RESULTS_DIR,"norm_count.png"),
       os.path.join(RESULTS_DIR,"FractionCounts.txt"),
       os.path.join(RESULTS_DIR,"total_reads.txt"),
       os.path.join(RESULTS_DIR,"compiledCounts_small2smallderived_cnt.txt"),
       os.path.join(RESULTS_DIR,"compiledCounts_medium2allmature_cnt.txt"),
       os.path.join(RESULTS_DIR,"compiledCounts_large2premature_cnt.txt"),
       os.path.join(RESULTS_DIR,"isomiRs.txt"),
       os.path.join(RESULTS_DIR,"isomiR_counttable.txt")
    message: "All requested output files ready." 


########################################################################
rule create_isomiR_count_table:
   input:  isomiRs=os.path.join(RESULTS_DIR,"isomiRs.txt"),
           matureseqs=os.path.join(MIRNADB_DIR,"allmature.fa"),
           mapfiles=("{spath}/{sm}_mapped_medium.txt".format(sm= s,spath=MAP_DIR) for s in SAMPLES)
   output:  os.path.join(RESULTS_DIR,"isomiR_counttable.txt")
   message: "Compiling count table for isomiRs"
   run: R("""
        require(Biostrings)
        fa <- as.character(readDNAStringSet("{input.matureseqs}"));
        mats <- grep("putative",names(fa),invert=T)
        fa[mats] <- substr(fa[mats],4,nchar(fa[mats])-3)
        isomers <- read.table("{input.isomiRs}",stringsAsFactors=F,header=F)
        result <- data.frame(mirna=isomers$V2,miRNAsequence=fa[isomers$V2], isomersequence=isomers$V3,totals=isomers$V1)
        rownames(result)=paste(result$mirna,result$isomersequence,"s",sep="_")

        samplefilestring = "{input.mapfiles}"
        sample.list = strsplit(samplefilestring," ")[[1]]
        for (sample in sample.list) {{
          st <- read.table(sample,stringsAsFactors=F,header=F)
          st$id = paste(st$V1,st$V2,"s",sep="_")
          st$one=1
          a <- aggregate(one~id,st,sum)
          rownames(a) <- a$id
          samplename=gsub("/","",gsub("_mapped_medium.txt","",gsub("{MAP_DIR}","",sample)));
          result[,samplename]  <- a[rownames(result),"one"]
          result[is.na(result[,samplename]),samplename] <- 0
        }}
        write.table(result,"{output}",quote=F,row.names=F,sep="\\t")
          """)

########################################################################
rule create_isomiR_table:
   input:   ("{spath}/{sm}_mapped_medium.txt".format(sm= s,spath=MAP_DIR) for s in SAMPLES)
   output:  os.path.join(RESULTS_DIR,"isomiRs.txt")
   params:   mincount=str(len(SAMPLES)*10)
   message: "Create table of mature isomiRs occuring at least {params.mincount} times."
   shell: """
        cat {input} |  sort | uniq -c  | awk '$1 > {params.mincount} {{print $0}}' > {output}
          """

########################################################################
rule extract_mapped_isomiRs:
   input:   os.path.join(MAP_DIR,"{s}_medium2allmature.sam")
   output:  os.path.join(MAP_DIR,"{s}_mapped_medium.txt")
   message: "extracting info from sam file"
   shell: """
              awk 'NF > 10 && $2 != 4 {{print $3 "\\t" $10}}'  {input} > {output}
          """

########################################################################
rule compile_counts:
  input:  
     large  = ("{spath}/{sample}_large2premature_counts.txt".format(sample=s,spath=MAP_DIR) for s in SAMPLES),
     medium = ("{spath}/{sample}_medium2allmature_counts.txt".format(sample=s,spath=MAP_DIR) for s in SAMPLES),
     small  = ("{spath}/{sample}_small2smallderived_counts.txt".format(sample=s,spath=MAP_DIR) for s in SAMPLES)
  output: 
     small  = os.path.join(RESULTS_DIR,"compiledCounts_small2smallderived_cnt.txt"),
     medium = os.path.join(RESULTS_DIR,"compiledCounts_medium2allmature_cnt.txt"),
     large  = os.path.join(RESULTS_DIR,"compiledCounts_large2premature_cnt.txt")
  message: "Combine count tables for samples into single table"
  run: R("""
         require(faradr);
         CombineCountTables("{MAP_DIR}", "{output.small}" , "_small2smallderived_counts.txt");
         CombineCountTables("{MAP_DIR}", "{output.medium}", "_medium2allmature_counts.txt");
         CombineCountTables("{MAP_DIR}", "{output.large}" , "_large2premature_counts.txt");
         """)    

########################################################################
rule copy_mapping_counts_to_results: 
    input: os.path.join(MAP_DIR,"{s}_counts.txt")
    output: os.path.join(RESULTS_DIR,"{s}_counts.txt")
    message: "copying {wildcards.s} to results"
    shell: "cp {input} {output} "

########################################################################
rule indexstats:
    input: "{sample}_sorted.bam"
    output: "{sample}_counts.txt"
    message: "calculate statistics on: {wildcards.sample} " 
    shell: "samtools idxstats {input} > {output}"

########################################################################
rule sam2bam:
    input:  "{sample}.sam"
    output: bam = "{sample}_sorted.bam",
            bai = "{sample}_sorted.bam.bai",
    message: "Converting {wildcards.sample} to sorted and indexed bam"
    shell:
      """
        samtools view -bS {input} > {output.bam}
        samtools sort {output.bam} {wildcards.sample}_sorted
        samtools index {output.bam}
      """

########################################################################
rule map_to_miRNA:
    input: small = os.path.join(NOSPIKE_DIR,"{sample}_small.fastq"),
           medium = os.path.join(NOSPIKE_DIR,"{sample}_medium.fastq"),
           large = os.path.join(NOSPIKE_DIR,"{sample}_large.fastq"),
           smallref = REFERENCE_SMALLDERIVED+".1.bt2",
           mediumref = REFERENCE_ALLMATURE+".1.bt2",
           largeref = REFERENCE_PREMATURE+".1.bt2",
           d1 = os.path.join(RESULTS_DIR,DIR_E),
	   d2 = os.path.join(MAP_DIR,DIR_E)
    output: small = os.path.join(MAP_DIR,"{sample}_small2smallderived.sam"),
            large = os.path.join(MAP_DIR,"{sample}_large2premature.sam"),
            medium = os.path.join(MAP_DIR,"{sample}_medium2allmature.sam")
    message: "Mapping length fractions to mirna databases for {wildcards.sample}"
    shell:
      """
     bowtie2 {BOWTIE_PARAMS_MIRNA} -x {REFERENCE_SMALLDERIVED} -U {input.small}  -S {output.small}  2>&1| \
       python sRNA_tools.py call_build_report --report_header {wildcards.sample}_small  --report_file_name {REPORT_FILE} 
     bowtie2 {BOWTIE_PARAMS_MIRNA} -x {REFERENCE_ALLMATURE}    -U {input.medium} -S {output.medium} 2>&1| \
       python sRNA_tools.py call_build_report --report_header {wildcards.sample}_medium --report_file_name {REPORT_FILE}
     bowtie2 {BOWTIE_PARAMS_MIRNA} -x {REFERENCE_PREMATURE}    -U {input.large}  -S {output.large}  2>&1| \
       python sRNA_tools.py call_build_report --report_header {wildcards.sample}_large  --report_file_name {REPORT_FILE}
      """

########################################################################
rule divide_reads: 
    input:  os.path.join(NOSPIKE_DIR,"{sample}.fastq")
    output: small =os.path.join(NOSPIKE_DIR,"{sample}_small.fastq"),
            medium=os.path.join(NOSPIKE_DIR,"{sample}_medium.fastq"),
            large =os.path.join(NOSPIKE_DIR,"{sample}_large.fastq")
    message: "Divide {wildcards.sample} fastq file into length classes"
    shell : 
      """
       cat {input} | paste - - - - |awk  '(length($2) >= 10 && length($2) < 15 )' | sed 's/\\t/\\n/g' > {output.small} 
       cat {input} | paste - - - - |awk  '(length($2) >= 15 && length($2) <= 44)' | sed 's/\\t/\\n/g' > {output.medium} 
       cat {input} | paste - - - - |awk  '(length($2) > 44 )'                     | sed 's/\\t/\\n/g' > {output.large} 
      """

########################################################################
rule count_fractions: 
    input: ("{sdir}/{sample}.fastq".format(sample=s,sdir=NOSPIKE_DIR) for s in SAMPLES),
           ("{sdir}/{sample}_small.fastq".format(sample=s,sdir=NOSPIKE_DIR) for s in SAMPLES),
           ("{sdir}/{sample}_medium.fastq".format(sample=s,sdir=NOSPIKE_DIR) for s in SAMPLES),
           ("{sdir}/{sample}_large.fastq".format(sample=s,sdir=NOSPIKE_DIR) for s in SAMPLES)
    output: os.path.join(RESULTS_DIR,"FractionCounts.txt")
    message: "Counting number of reads in fractions"
    shell:
        """ 
          echo "sample\ttoosmall\tsmall\tmedium\tlarge\ttotal" > {output}
           for i in  {SAMPLES}; do 
               ALL_CNT=$(($(cat {NOSPIKE_DIR}/${{i}}.fastq | wc -l)/4))
               SML_CNT=$(($(cat {NOSPIKE_DIR}/${{i}}_small.fastq | wc -l)/4))
               MED_CNT=$(($(cat {NOSPIKE_DIR}/${{i}}_medium.fastq | wc -l)/4))
               LRG_CNT=$(($(cat {NOSPIKE_DIR}/${{i}}_large.fastq | wc -l)/4))
               VSM_CNT=$((ALL_CNT-SML_CNT-MED_CNT-LRG_CNT))
               echo "$i\t$VSM_CNT\t$SML_CNT\t$MED_CNT\t$LRG_CNT\t$ALL_CNT" >> {output} 
           done  
        """ 

########################################################################
rule spike_count_plots:
    input: totalcount=os.path.join(RESULTS_DIR, "total_reads.txt"),
           spikecount=os.path.join(RESULTS_DIR,"CountTable_size_spike.txt")
    output: countpng=os.path.join(RESULTS_DIR,"count.png"),
            normcountpng=os.path.join(RESULTS_DIR,"norm_count.png")
    message: "Creating spike count plots " 
    run: R("""
           library(faradr);
           png(filename="{output.countpng}");
           plot(PlotSpikeCounts("{input.spikecount}"));
           dev.off();
           png(filename="{output.normcountpng}");
           plot(PlotNormalSpikeCounts("{input.spikecount}", "{input.totalcount}"));
           dev.off();
           """)
             
########################################################################
# calculate amount of reads per sample for spike normalise plots
rule total_reads_count:
   input: os.path.join(RESULTS_DIR,"CountTable_size_spike.txt")
   output: os.path.join(RESULTS_DIR, "total_reads.txt") 
   message: "Count number of reads in each sample using wc"
   shell: 
       """ 
           echo -n "" > {output} 
           for i in  {SAMPLES}; do 
               ALL_CNT=$(($(cat {FQ_DIR}/${{i}}.fastq | wc -l)/4))
               echo "$i\t$ALL_CNT" >>  {output}
           done  
       """

########################################################################
rule spike_count:
    input: ("{sdir}/{sample}_spike_aln_sorted.bam.bai".format(sample=s,sdir=SPIKE_DIR) for s in SAMPLES)
    output: os.path.join(RESULTS_DIR,"CountTable_size_spike.txt"),
            os.path.join(RESULTS_DIR,"CountTable_norm_spike.txt")
    message: "Filtering and counting spike reads"
    shell: 
      """
        python sRNA_tools.py count_spikes --basename "_spike_aln_sorted.bam"  --bam-dir {SPIKE_DIR} --count-dir {RESULTS_DIR}
      """



########################################################################
#  script to create miRNA databases for mapping
rule make_mirnadb:
      input: d1=os.path.join(MIRNADB_DIR,DIR_E)
      output: os.path.join(MIRNADB_DIR,"smallderived.fa"),
              os.path.join(MIRNADB_DIR,"mature.fa"),
              os.path.join(MIRNADB_DIR,"matureputative.fa"),
              os.path.join(MIRNADB_DIR,"premature.fa")
      message: "Create databases for mature premature putative classes of miRNA" 
      run: R("""
               source("makeMicroRNAdb.R") 
               ProcessMirBaseData({SPECIES},{MIRBASE_VERSION},{MIRNADB_DIR})
             """)


########################################################################
#  Merge mature and putative mature to single file
rule get_allmature:
      input:    mature=os.path.join(MIRNADB_DIR,"mature.fa"),
                matureputative=os.path.join(MIRNADB_DIR,"matureputative.fa")
      output:   os.path.join(MIRNADB_DIR,"allmature.fa")
      message: "Combining mature and matureputative into allmature"
      shell:   "cat {input.mature} {input.matureputative} > {output}"

   
########################################################################
# Create bowtie2 index 
rule create_bowtie_index: 
      input:   "{seqdat}.fa"
      output:  "{seqdat}.1.bt2","{seqdat}.2.bt2", "{seqdat}.3.bt2","{seqdat}.4.bt2","{seqdat}.rev.1.bt2","{seqdat}.rev.2.bt2"
      message: "Creating bowtie2 index for sequence database for {wildcards.seqdat}" 
      shell:   "bowtie2-build -f {input} {wildcards.seqdat} >> {SCRATCH_DIR}/Bowtie2-build.stdout"

########################################################################
# Align reads to spikes 
rule aln_spikes:
    input:   fq= os.path.join(FQ_DIR,"{sample}.fastq"),
             d1=os.path.join(SPIKE_DIR,DIR_E),
             d2=os.path.join(NOSPIKE_DIR,DIR_E)
    output:  mapping=os.path.join(SPIKE_DIR,"{sample}_spike_aln.sam"),
             unmapped=os.path.join(NOSPIKE_DIR,"{sample}.fastq")
    message: "Aligning reads to spike sequences."
    shell:   "bowtie2 {BOWTIE_PARAMS_SPIKE} -x {SPIKES_REF} -U {input.fq} -S {output.mapping} --un {output.unmapped}" 



########################################################################
# create_dir not only creates the directory but also touches a file in the directory.
# The file can be used to check if the directory exists in a rule input.  Setting 
# the directory itself as input to a rule will  cause unneeded rule excution as the 
# file-time of the directory is updated if a file is created in the directory 
rule create_dir:
    output:  os.path.join("{s}",DIR_E)
    message: "Create directory {wildcards.s}"
    shell:   "mkdir -p {wildcards.s}; touch {output} " 
