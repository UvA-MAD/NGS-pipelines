# Snakefile for mRNA  
import os
import sys
from snakemake.utils import R
import Snakeparam_mrna as param

DIR_E = ".dexist"
SCRATCH_DIR=param.SCRATCH_DIR
ASSEMB_DIR = os.path.join(SCRATCH_DIR,"UnmappAssemb21")
ASSEMB_HASH = 21
THREADS_PER_JOB = 8


#scrict mapping : -M 2  flag removed 
TMAP_PARAMS = "-O 3 -n {THREADS_PER_JOB}  -g 3 -a 1 -v stage1 map1 map2 map3"

domains = ("prokaryote","eukaryote")

if param.DOMAIN not in domains:
   sys.exit("Pipeline configuration error: unknown domain: "+ param.DOMAIN)
DOMAIN=param.DOMAIN

if not os.path.exists(param.FQ_DIR):
   sys.exit("Pipeline configuration error: Sample directory (FQ_DIR) not found.")
FQ_DIR=param.FQ_DIR

if not os.path.exists(param.SPIKES_REF): 
   sys.exit("Pipeline configuration error: Transcriptome database does not exist.")
SPIKES_REF=param.SPIKES_REF

GENOME_DB=param.GENOME_DB

TRANSCRIPTOME_DB=param.TRANSCRIPTOME_DB

GENOME_ANNOT=param.GENOME_ANNOT

SAMPLES=param.SAMPLES 
RESULT_DIR= param.RESULT_DIR


########################################################################
rule all:
    input: os.path.join(RESULT_DIR,"CountTable_transc.txt"),
           os.path.join(RESULT_DIR,"count.png"),
           os.path.join(RESULT_DIR,"ReadCountPlot.png"),
           os.path.join(RESULT_DIR,"ReadCounts.txt"),
           os.path.join(RESULT_DIR,"CountTable_genome.txt"),
           os.path.join(RESULT_DIR,"CountTable_contigs.txt"),
           os.path.join(RESULT_DIR,"assembly100.fa"),
           (RESULT_DIR+"/{sample}_merged.bam".format(sample=s) for s in SAMPLES)
    message: "Done running mRNA pipeline"


########################################################################
rule download_genome: 
    output: GENOME_DB
    shell: "curl {param.GENOME_ZIP_FASTA_URL} | gunzip  -c > {output}"
    
########################################################################
rule download_gen_annotation: 
    output: GENOME_ANNOT
    shell: "curl {param.GENOME_ZIP_GFF_URL} | gunzip  -c > {output}"
  
########################################################################
rule download_transcriptome:
   input: os.path.join(SCRATCH_DIR,DIR_E)
   output:  TRANSCRIPTOME_DB
   message: "downloading transcriptome"
   shell:
     """
        curl  {param.CDNA_ZIP_FASTA_URL}  | gunzip -c -  > {output}
        curl  {param.NCRNA_ZIP_FASTA_URL} | gunzip -c - >> {output}
     """

########################################################################
rule readcount_plot:
    input: os.path.join(RESULT_DIR,"ReadCounts.txt")
    output: os.path.join(RESULT_DIR,"ReadCountPlot.png")
    run: R("""
             infile <- "{input}"
             rc <- t(read.table(infile,row.names=1,header=T)[,2:7])
             mv = max(read.table(infile,header=T)$total)
             rc <- rc[,order(colnames(rc))]
             png(file="{output}",width=480,height=640)
             barplot(rc,legend=rownames(rc),col=rainbow(7),ylim=c(0,1.3*mv),las=2)
             dev.off()
           """)

########################################################################
rule combine_readcount:
    input:  (SCRATCH_DIR+"/{sample}_readcnt.txt".format(sample=s) for s in SAMPLES)
    output: os.path.join(RESULT_DIR,"ReadCounts.txt")
    message: "Combining counttables into single file"
    shell:
        """
          echo "sample\ttotal\ttrimmed\tspike\ttranscriptome\tgenome\tcontigs\tunmapped" > {output}
          for i in {input} ; do tail -1 ${{i}}  >> {output} ; done
        """

########################################################################
rule combine_mapping_counts:
       input:  (RESULT_DIR+"/{sample}_{mt}_cnt.txt".format(sample=s,mt="{mtype}") for s in SAMPLES)
       output: os.path.join(RESULT_DIR,"CountTable_{mtype}.txt")
       params: samples=("{sample}".format(sample=s) for s in SAMPLES)
       message: "Combining {wildcards.mtype} countables"
       run: R("""
           files=strsplit("{input}"," ")[[1]]
           samples=strsplit("{params.samples}"," ")[[1]]
           transc <- read.table(files[1],stringsAsFactors=F)[,2]
           for (i in files[-1]) transc = unique(c(transc,read.table(i,stringsAsFactors=F)[,2]) )
           transc <- sort(transc);
           res = data.frame(Transcript=transc)
           rownames(res) <- transc
           for (i in 1:length(samples)) {{
                tab = read.table(files[i],stringsAsFactors=F)
                res[,samples[i]] = 0;
                res[tab$V2,samples[i]] = tab$V1
            }}
           write.table(res,"{output}",sep="\\t",quote=F,row.names=F)
           """)


########################################################################
rule contig_count_table:
    input: os.path.join(SCRATCH_DIR,"{sample}_contigs.sam")
    output: os.path.join(RESULT_DIR,"{sample}_contigs_cnt.txt")
    message: "Create contig count table"
    shell:
         """
             awk '$2 == 0 {{ print $3 }} $2 == 16 {{print $3 "_rc"}}'  {input} | sort | uniq -c > {output}
         """

########################################################################
rule spike_count_table:
    input: os.path.join(SCRATCH_DIR,"{sample}_spike.sam")
    output: os.path.join(RESULT_DIR,"{sample}_spike_cnt.txt")
    message: "Create contig count table"
    shell:
         """
             awk '$2 == 0 {{ print $3 }} $2 == 16 {{print $3 "_rc"}}'  {input} | sort | uniq -c > {output}
         """

########################################################################
rule map_contigs:
    input: reads=os.path.join(SCRATCH_DIR,"{sample}_genome_unmapped.fastq"),
           db=os.path.join(SCRATCH_DIR,"assembly100.fa.tmap.bwt")
    output: os.path.join(SCRATCH_DIR,"{sample}_contigs.sam")
    message: "mapping rest to contigs"
    shell:
        """
          tmap mapall -r {input.reads} -f {SCRATCH_DIR}/assembly100.fa {TMAP_PARAMS} > {output}
        """

rule copy_assembly:
    input: os.path.join(SCRATCH_DIR,"assembly100.fa")
    output: os.path.join(RESULT_DIR,"assembly100.fa")
    shell: "cp {input} {output}"

########################################################################
rule select_unmapped_contigs:
    input: os.path.join(ASSEMB_DIR,"contigs.fa")
    output: os.path.join(SCRATCH_DIR,"assembly100.fa")
    message: "Selecting contigs from assembly"
    shell:
        """
          awk 'BEGIN {{seq=""}} ($1 ~ /^>/) {{ if (seq  && (length(seq) > 99)) {{print name; print seq; }} seq="";   name=$0; next}} {{seq=seq $0}}' {input} > {output}
        """

########################################################################
rule assemble_unmapped:
    input: os.path.join(SCRATCH_DIR,"all_unmapped.fastq")
    output: os.path.join(ASSEMB_DIR,"contigs.fa")
    message: "Assembling ummapped reads"
    shell:
        """
          velveth {ASSEMB_DIR} {ASSEMB_HASH} -fastq {input}
          velvetg {ASSEMB_DIR}
        """

########################################################################
rule combine_unmapped:
    input: (SCRATCH_DIR+"/{sample}_genome_unmapped.fastq".format(sample=s) for s in SAMPLES)
    output: os.path.join(SCRATCH_DIR,"all_unmapped.fastq")
    message: "combining all unmapped reads to single fastq file"
    shell: "cat {input} > {output}"


########################################################################
rule pro_get_transcript_count:
     input: os.path.join(SCRATCH_DIR,"{sample}_readsTagged.sam")
     output: os.path.join(SCRATCH_DIR,"{sample}_prokaryote_transc_cnt.txt")  
     message: "transcript mapping count" 
     shell: 
         """
           rc_ntransc=$(grep '__no_feature\|__ambiguous\|__alignment_not_unique\|__too_low_aQual\|__not_aligned' {input} | wc -l)
           echo $rc_ntransc > {output}
         """
########################################################################
rule euk_get_transcript_count:
     input: os.path.join(SCRATCH_DIR,"{sample}_transc_unmapped.fastq")
     output: os.path.join(SCRATCH_DIR,"{sample}_eukaryote_transc_cnt.txt")
     message: "transcript mapping count" 
     shell:
         """
           rc_ntransc=$(($(cat  {input} | wc -l)/4))
           echo $rc_ntransc > {output}
         """

########################################################################
rule read_distribution_count:
    input: raw=os.path.join(FQ_DIR,"{sample}.fastq"),
           trimmed=os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq"),
           nspike=os.path.join(SCRATCH_DIR,"{sample}_spike_unmapped.fastq"),
           ntransc=os.path.join(SCRATCH_DIR,"{sample}_"+DOMAIN+"_transc_cnt.txt"),
           ngenome=os.path.join(SCRATCH_DIR,"{sample}_genome_unmapped.fastq"),
           ncontig=os.path.join(SCRATCH_DIR,"{sample}_contigs_unmapped.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_readcnt.txt")
    message: "Count number of reads per class for sample {wildcards.sample}."
    shell:
        """
          rc_raw=$(($(cat     {input.raw}     | wc -l)/4))
          rc_trimmed=$(($(cat {input.trimmed} | wc -l)/4))
          rc_nspike=$(($(cat  {input.nspike}  | wc -l)/4))
          rc_ntransc=`cat  {input.ntransc}` 
          rc_ngenome=$(($(cat  {input.ngenome} | wc -l)/4))
          rc_ncontigs=$(($(cat {input.ncontig} | wc -l)/4))
          echo "sample\ttotal\ttrimmed\tspike\ttranscriptome\tgenome\tcontigs\tunmapped" > {output}
          echo -n "{wildcards.sample}\t"           >> {output}
          echo -n "$rc_raw\t"                      >> {output}
          echo -n "$((rc_raw-rc_trimmed))\t"       >> {output}
          echo -n "$((rc_trimmed-rc_nspike))\t"    >> {output}
          echo -n "$((rc_nspike-rc_ntransc))\t"    >> {output}
          echo -n "$((rc_ntransc-rc_ngenome))\t"   >> {output}
          echo -n "$((rc_ngenome-rc_ncontigs))\t"  >> {output}
          echo    "$rc_ncontigs"                   >> {output}
        """

########################################################################
rule genome_count_table:
    input: os.path.join(SCRATCH_DIR,"{sample}_genome.sam") if (DOMAIN=="eukaryote") else os.path.join(SCRATCH_DIR,"{sample}_readsTagged.sam")
    output: os.path.join(RESULT_DIR,"{sample}_genome_cnt.txt")
    message: "Create count table"
    shell:
        """
          tmpfile=$(mktemp /tmp/mrnapipe.XXXXXX)
	  if [ "{DOMAIN}"  = "prokaryote" ] ; then 
              cat {input} | grep '__no_feature\|__ambiguous\|__alignment_not_unique\|__too_low_aQual' > $tmpfile
          else
             cat {input} > $tmpfile
          fi
          awk -v "b=100000" 'substr($1,1,1) == "@" {{ next; }} $2 == 0 {{ print $3 " - " b*int($4/b) }} $2 == 16 {{ print $3 " + " b*int($4/b)  }} ' $tmpfile | sort  -k1,2 -k3n | uniq -c > {output}
	  rm $tmpfile
        """
 

########################################################################
# No annotation  is needed so annot is set to a file which will be there for sure
rule transcript_count_table:
    input: sam=os.path.join(SCRATCH_DIR,"{sample}_transc.sam") if (DOMAIN=="eukaryote") else os.path.join(SCRATCH_DIR,"{sample}_genome.sam"),
           annot=GENOME_ANNOT if (DOMAIN=="prokaryote")  else "/bin/ls"
    output: countTable=os.path.join(RESULT_DIR,"{sample}_transc_cnt.txt"),
            samFile=os.path.join(SCRATCH_DIR,"{sample}_readsTagged.sam")
    message: "Create count table"
    shell:
        """
	  if [ "{DOMAIN}"  = "prokaryote" ] ; then 
             htseq-count -a 0 -t gene -i Name -o {output.samFile} {input.sam} {input.annot} | head -n -5 | awk '{{print $2 "\\t" $1 }}' > {output.countTable}
	  else
             awk '$2 == 0 {{ print $3 }} $2 == 16 {{print $3 "_rc"}}'  {input.sam} | sort | uniq -c > {output.countTable}
             touch {output.samFile}
	  fi 
        """

########################################################################
rule tmap_index:
    input:  "{s}"
    output: "{s}.tmap.anno",
            "{s}.tmap.bwt",
            "{s}.tmap.pac",
            "{s}.tmap.sa"
    message: "Build an index for tmap"
    shell: "tmap index -f {input} "


if DOMAIN=="prokaryote":
    GENOME_MAP_INPUT = "spike"
else:
    GENOME_MAP_INPUT = "transc"

########################################################################
rule map_genome:
    input:  fq=os.path.join(SCRATCH_DIR,"{sample}"+("_{input}_unmapped.fastq").format(input=GENOME_MAP_INPUT)),
            db=GENOME_DB+".tmap.bwt"
    output: os.path.join(SCRATCH_DIR,"{sample}_genome.sam")
    message: "mapping rest to genome"
    shell:
        """
          tmap mapall -r {input.fq} -f {GENOME_DB} {TMAP_PARAMS} > {output}
        """



########################################################################
rule map_transcriptome:
    input:  fq=os.path.join(SCRATCH_DIR,"{sample}_spike_unmapped.fastq"),
            db=TRANSCRIPTOME_DB+".tmap.bwt"
    output: os.path.join(SCRATCH_DIR,"{sample}_transc.sam")
    message: "mapping to transcriptome"
    shell:  "tmap mapall -r {input.fq} -f {TRANSCRIPTOME_DB} {TMAP_PARAMS} > {output}"

########################################################################
rule extract_unmapped:
    input:  os.path.join(SCRATCH_DIR,"{s}.sam")
    output: os.path.join(SCRATCH_DIR,"{s}_unmapped.fastq")
    message: "Extract unmapped reads from sam to fastq"
    shell:
        """
          awk '$3=="*" {{printf("@%s\\n%s\\n+%s\\n%s\\n",$1,$10,$1,$11)}}' {input} > {output}
        """

########################################################################
# make spike count plots
rule spike_count_plots:
    input: totalcount=os.path.join(RESULT_DIR, "total_reads.csv"),
           spikecount=os.path.join(RESULT_DIR,"CountTable_spike.txt")
    output: countpng=os.path.join(RESULT_DIR,"count.png"),
            normcountpng=os.path.join(RESULT_DIR,"norm_count.png")
    run: R("""
             library(faradr);
             png(filename="{output.countpng}",width=1024,height=1024);
             plot(PlotSpikeCounts("{input.spikecount}"));
             dev.off();
             png(filename="{output.normcountpng}",width=1024,height=1024);
             plot(PlotNormalSpikeCounts("{input.spikecount}", "{input.totalcount}"));
             dev.off();
           """)

########################################################################
# Count the number of reads in the input fastq files. The
# method assumes single sequence and quality lines.
# By checking if the first character of every 4th line is
# a @ the assumption is tested.
# The much slower count_fq_reads function in sRNA_tools.py can
# be used if the assumption does not hold.
rule total_reads_count:
    input:  (FQ_DIR+"/{s}.fastq".format(s=sample) for sample in SAMPLES)
    output: os.path.join(RESULT_DIR, "total_reads.csv")
    message: "Count number of reads in the raw samples."
    shell:
        """
          echo -n "" > {output}
          for i in {input} ; do
             SAMPLE=$(basename $i .fastq)
             CNT=$(awk '(NR%4-1) {{next}} $1 ~ /^@/ {{sc++; next}} {{print "ERR"; exit -1}} END {{print sc}}' $i)
             echo "$SAMPLE\t$CNT" >> {output}
          done
        """


########################################################################
rule extract_mapped_only: 
     input: "{sample}.sam"
     output: "{sample}_mapped.sam"
     shell: "samtools view -h -F 4 {input} > {output} " 
     
########################################################################
rule combine2bam:
      input: sp=os.path.join(SCRATCH_DIR,"{sample}_spike_mapped.sam"),
             tr=os.path.join(SCRATCH_DIR,"{sample}_transc_mapped.sam"),
             gn=os.path.join(SCRATCH_DIR,"{sample}_genome_mapped.sam"), 
             ct=os.path.join(SCRATCH_DIR,"{sample}_contigs.sam") 
      output: os.path.join(RESULT_DIR,"{sample}_merged.bam")
      shell: "samtools merge  {output} {input.sp} {input.tr} {input.gn} {input.ct} "


########################################################################
rule sam2sortedbam:
    input:  "{sample}.sam"
    output: bam = "{sample}_sorted.bam",
            bai = "{sample}_sorted.bam.bai",
    message: "Converting {wildcards.sample} to sorted and indexed bam"
    shell:
        """
          samtools sort -@ {THREADS_PER_JOB} {input} > {output.bam}
          samtools index {output.bam}
        """

########################################################################
rule aln_spikes:
    input: os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_spike.sam")
    message: "Aligning reads to spike sequences."
    shell:
        """
          tmap mapall -r {input} -f {SPIKES_REF} {TMAP_PARAMS} > {output}
        """

########################################################################
rule trim_reads:
    input: os.path.join(FQ_DIR,"{sample}.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq")
    params: minlen=param.MIN_READLEN,
            trimlen=param.MAX_READLEN
    message: "Trimming reads to {params.trimlen}  nt. And remove reads < {params.minlen} nt"
    shell:
       """
         awk 'BEGIN {{tlen={params.trimlen}; lmin={params.minlen}}} {{ln++; av[ln] =$0}} ln==4 {{if (length($0)>=lmin) {{ printf("%s\\n%s\\n%s\\n%s\\n", av[1],substr(av[2],1,tlen),av[3],substr($0,1,tlen)); }} ln=0; }}'  {input} > {output}
       """

########################################################################
rule create_dir:
    output:  os.path.join("{s}",DIR_E)
    message: "Create directory {wildcards.s}"
    shell:   "mkdir -p {wildcards.s}; touch {output} "

########################################################################
# This rule deletes the map to which SCRATCH_DIR points. 
# Double check if SCRATCH_DIR points to a location you realy want to delete 

rule i_am_sure_clean_scratch:
    message: "Removing scratch files for the mrna pipeline" 
    shell: "rm -rf {SCRATCH_DIR}" 
