# Snakefile for mRNA  in Eukaryotes
import os
from snakemake.utils import R

EXPERIMENT_DIR = "../.."

# species for which pipeline is run
SPECIES = "mmu"

SCRATCH_DIR = os.path.join(EXPERIMENT_DIR,"Scratch/exonmapping")

DB_DIR=os.path.join(SCRATCH_DIR,"annotations")

# in an ideal world the database is found by species alone 
GENOME=os.path.join(DB_DIR,"Mus_musculus.GRCm38.dna.primary_assembly.fa")
GENOME_URL="ftp://ftp.ensembl.org/pub/release-84/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz"

ION_RRNA_SEQS="/zfs/datastore0/software/src/Ion_RNASeq/annotations/mm10/xrRNA.fasta"

RRNA_SEQS=os.path.join(DB_DIR,"addRNA.fasta")
GENOME_GTF=os.path.join(DB_DIR,"gene.gtf")
GENOME_GTF_URL="ftp://ftp.ensembl.org/pub/release-84/gtf/mus_musculus/Mus_musculus.GRCm38.84.gtf.gz"

ENS_DATA_SET="mmusculus_gene_ensembl"
REF_FLAT=os.path.join(DB_DIR,"refFlat")
RRNA_INT=os.path.join(DB_DIR,"rRNA.interval")
RRNA_MASK=os.path.join(DB_DIR,"rRNA_mask.gtf")


# reference spikein sequences
SEQDB="/mad/MAD-RBAB/05_Reference-db"
SPIKES_REF = os.path.join(SEQDB,"external/ERCC/ERCC92.fa")

# spike count table directory
RESULT_DIR = os.path.join(EXPERIMENT_DIR,"Results/exonmapping")

DIR_E = ".dexist"

STAR_BIN = "/mad/bin/STAR"
TRIMMOMATIC_JAR = "/zfs/datastore0/software/src/Trimmomatic-0.36/trimmomatic-0.36.jar" 

# directory with raw reads in fastq format
FQ_DIR = os.path.join(EXPERIMENT_DIR,"Scratch/raw")
SAMPLES =  [s[:-6] for s in os.listdir(FQ_DIR) if s.endswith(".fastq")]

#File with experimental design. The design file used for basic QC can be reused
EXP_DESIGN="seqdesign.txt"

#The column name in the experimental design to use for Deseq2 differental expression analysis
CONTRAST_COLUMN_NAME="Group"

ASSEMB_DIR = os.path.join(SCRATCH_DIR,"UnmappAssemb21")
ASSEMB_HASH = 21

SEQ_COUNT_LOG="seq_count.txt"

BOWTIE_PARAMS_SPIKE  = " -L 6 -i S,0,0.5 --norc --rdg 1,6 --rfg 1,6 -p 8  --score-min L,-1,-0.6 "
BOWTIE_PARAMS="--local --very-sensitive-local -p 8 -q --mm" 

PICARD_DIR="/mad/software/src/picard-tools"

rule all:
     input: (RESULT_DIR+"/{sample}_STAR_bowtie_RNAmetrics.txt".format(sample=s) for s in SAMPLES),
            (RESULT_DIR+"/{sample}_STAR_bowtie_alignmentSummary.txt".format(sample=s) for s in SAMPLES),
            (RESULT_DIR+"/{sample}_cufflinks/transcripts.gtf".format(sample=s) for s in SAMPLES),
            RESULT_DIR+"/GenCountTable.txt",
            RESULT_DIR+"/ExonCountTable.txt",
            RESULT_DIR+"/DESeq2_gene_result.txt"
#             (SCRATCH_DIR+"/{sample}_STAR_bowtie.bam".format(sample=s) for s in SAMPLES),
#             (SCRATCH_DIR+"/{sample}_bowtie_aln_xrna.bam".format(sample=s) for s in SAMPLES),
#             (RESULT_DIR+"/{sample}_STAR_bowtie_cufflinks/transcripts.gtf".format(sample=s) for s in SAMPLES)
     message: "all"
          


rule deseq_analysis:
  input: countfile=os.path.join(RESULT_DIR,"GenCountTable.txt"),
         designfile=EXP_DESIGN
  output: os.path.join(RESULT_DIR,"DESeq2_gene_result.txt")
  params: contrast_column=CONTRAST_COLUMN_NAME
  message: "using DESeq2 to find differentially experessed genes"
  run: R("""
    require(DESeq2)
    gencounts <- read.table("{input.countfile}",sep="\\t",stringsAsFactors=T,header=T,quote="")
    rownames(gencounts) <-  gencounts$EnsembleID

    design <- unique(read.table("seqdesign.txt",header=T)[,c("SampleID","{params.contrast_column}")])

    rawcounts <- gencounts[1:(nrow(gencounts)-5),c(3:ncol(gencounts))]
    rownames(rawcounts) <- gencounts[1:(nrow(gencounts)-5),1]

    dds <- DESeqDataSetFromMatrix(countData=rawcounts,colData=design,design = ~ {params.contrast_column})
    dds <- DESeq(dds)
    res <- results(dds)
    dff <- as.data.frame(res[order(res$padj),])
    dff$description <- gencounts[rownames(dff),"description"]
    write.table(dff,file="{output}",row.names=T,col.names=T,sep="\\t",quote=F);
         """)

rule combined_gen_count_table:
  input:  (SCRATCH_DIR+"/{sample}_STAR_bowtie_gen_count.txt".format(sample=s) for s in SAMPLES)
  output: os.path.join(RESULT_DIR,"GenCountTable.txt")
  params: samples=("{sample}".format(sample=s) for s in SAMPLES)
  message: "combining per sample count tables"
  run: R("""
      library(biomaRt)
      ensemblmart = useEnsembl(biomart="ensembl",dataset="{ENS_DATA_SET}")
      ann <-  getBM(attributes=c('ensembl_gene_id','description','chromosome_name'), mart = ensemblmart)
      rownames(ann) <- ann$ensembl_gene_id
      files=strsplit("{input}"," ")[[1]]
      samples=strsplit("{params.samples}"," ")[[1]]
      genids = read.table(files[1],sep="\\t",stringsAsFactors=F)[,1]
      res <- data.frame(EnsembleID=genids,description=ann[genids,"description"],stringsAsFactors=F)
      for (i in 1:length(samples)) {{
          res[,samples[i]] = read.table(files[i],sep="\\t")[,2]
      }}
      write.table(res,"{output}",sep="\\t",quote=F,row.names=F)
         """)


rule combined_exon_count_table:
  input:  (SCRATCH_DIR+"/{sample}_STAR_bowtie_exon_count.txt".format(sample=s) for s in SAMPLES)
  output: os.path.join(RESULT_DIR,"ExonCountTable.txt")
  params: samples=("{sample}".format(sample=s) for s in SAMPLES)
  message: "combining per sample count tables"
  run: R("""
      files=strsplit("{input}"," ")[[1]]
      samples=strsplit("{params.samples}"," ")[[1]]
      exonids = read.table(files[1],sep="\\t",stringsAsFactors=F)[,1]
      res <- data.frame(EnsembleID=exonids,stringsAsFactors=F)
      for (i in 1:length(samples)) {{
          res[,samples[i]] = read.table(files[i],sep="\\t")[,2]
      }}
      write.table(res,"{output}",sep="\\t",quote=F,row.names=F)
         """)


rule gen_count_tables:
  input: os.path.join(SCRATCH_DIR,"{s}.bam")
  output: os.path.join(SCRATCH_DIR,"{s}_gen_count.txt")
  message: "creating count table for {wildcards.s}" 
  shell: " samtools view -F4 {input} | htseq-count -q - {GENOME_GTF} | head -n -5 > {output} " 

rule cufflinks:
   input: bam=os.path.join(SCRATCH_DIR,"{s}_STAR_bowtie.bam"),
          mask=RRNA_MASK,
          annot=GENOME_GTF
   output: os.path.join(RESULT_DIR,"{s}_cufflinks/transcripts.gtf"),
           os.path.join(RESULT_DIR,"{s}_cufflinks/genes.fpkm_tracking"),
           os.path.join(RESULT_DIR,"{s}_cufflinks/isoforms.fpkm_tracking")
   message: "Cufflinks transcript assembly and quantification"
   shell: 
     """
       cufflinks -q -p 12 -m 100 -s 60 -G {input.annot} -M {input.mask} \
         --library-type fr-secondstrand --max-bundle-length 3500000 -o {RESULT_DIR}/{wildcards.s}_cufflinks --no-update-check  {input.bam}
     """


rule exon_count_table: 
  input: bam=os.path.join(SCRATCH_DIR,"{s}.bam"),
         annot=GENOME_GTF
  output: os.path.join(SCRATCH_DIR,"{s}_exon_count.txt")
  message: "creating count table for {wildcards.s}" 
  shell: " samtools view -F4 {input.bam} | htseq-count -t exon -i exon_id -q - {input.annot} | head -n -5 > {output} " 


rule create_rna_interval: 
     input: bam=os.path.join(SCRATCH_DIR,"S01_aligned_STAR.bam"),
            gtf=GENOME_GTF
     output: RRNA_INT
     shell:
        """
          samtools view -H {input.bam} | grep -v "^@PG" | grep -v "^@CO" >  {output}
          grep 'gene_biotype "rRNA"' {input.gtf} |perl -ne '($name)=/gene_name "(.+?)"/;split/\t/; print "$_[0]\t$_[3]\t$_[4]\t$_[6]\t$name\n"'|uniq  >> {output} 
        """

rule rna_metrics: 
     input: bam=os.path.join(SCRATCH_DIR,"{sample}_{alignment}.bam"),
            refflat=os.path.join(SCRATCH_DIR,"refFlat"),
            interval=RRNA_INT
     output: os.path.join(RESULT_DIR,"{sample}_{alignment}_RNAmetrics.txt")
     message: "calculating rna metrics for {wildcards.sample}" 
     shell: 
        """ 
         java -jar {PICARD_DIR}/CollectRnaSeqMetrics.jar REF_FLAT={input.refflat} \
           RIBOSOMAL_INTERVALS={input.interval} STRAND=FIRST_READ_TRANSCRIPTION_STRAND \
           MINIMUM_LENGTH=100 LEVEL=ALL_READS I={input.bam} O={output} R={GENOME} 
        """

rule gen_rna_mask:
      input: GENOME_GTF 
      output: RRNA_MASK
      shell: 
         """
           grep 'gene_biotype "rRNA"' {input} > {output}
        """

rule gen_refflat:
     input:   GENOME_GTF
     output:  os.path.join(SCRATCH_DIR,"refFlat")
     message: "Generate refFlat from gtf"
     shell: 
        """ 
          TMP_FILE=`mktemp`
          gtfToGenePred -ignoreGroupsWithoutExons -genePredExt {input}  $TMP_FILE
          awk 'BEGIN{{FS="\\t"}};{{print $12"\\t"$1"\\t"$2"\\t"$3"\\t"$4"\\t"$5"\\t"$6"\\t"$7"\\t"$8"\\t"$9"\\t"$10}}' $TMP_FILE > {output} 
          rm $TMP_FILE
        """ 

rule alignment_summary: 
     input: os.path.join(SCRATCH_DIR,"{sample}_{alignment}.bam")
     output: os.path.join(RESULT_DIR,"{sample}_{alignment}_alignmentSummary.txt")
     message: "calculating alignment metrics for {wildcards.sample}" 
     shell: 
        """ 
         java -jar {PICARD_DIR}/CollectAlignmentSummaryMetrics.jar  I={input} O={output} R={GENOME} LEVEL=ALL_READS 
        """

rule merge_STAR_and_bowtie:
     input: star=os.path.join(SCRATCH_DIR,"{s}_aligned_STAR.bam"),
            bowtie=os.path.join(SCRATCH_DIR,"{s}_bowtie_aln_genome.bam")
     output: os.path.join(SCRATCH_DIR,"{s}_STAR_bowtie.bam")
     message: "Merging bam files {input.star} and {input.bowtie}"
     shell: 
       """ 
         java -jar {PICARD_DIR}/MergeSamFiles.jar   USE_THREADING=true MSD=true AS=true I={input.star} I={input.bowtie} O={output} 
         samtools index {output}
       """


########################################################################
rule aln_to_xrna_with_bowtie:
    input:   fq=os.path.join(SCRATCH_DIR,"{sample}_bowtie_unmapped_genome.fq"),
             ref=os.path.join(SCRATCH_DIR,"xrna.1.bt2")
    output:  map=os.path.join(SCRATCH_DIR,"{sample}_bowtie_aln_xrna.bam"),
             unmapped=os.path.join(SCRATCH_DIR,"{sample}_bowtie_unmapped_xrna.fq"),
    message: "Aligning reads of sample {wildcards.sample} with bowtie2 to rRNA"
    shell:   "bowtie2 {BOWTIE_PARAMS} -x {SCRATCH_DIR}/xrna -U {input.fq} --un {output.unmapped} | \
              samtools view -bS - | samtools sort - {SCRATCH_DIR}/{wildcards.sample}_bowtie_aln_xrna"

########################################################################
rule aln_to_genome_with_bowtie:
    input:   fq=os.path.join(SCRATCH_DIR,"{sample}_STAR_unmapped.fq"),
             ref=os.path.join(SCRATCH_DIR,"genome.1.bt2")
    output:  map=os.path.join(SCRATCH_DIR,"{sample}_bowtie_aln_genome.bam"),
             unmapped=os.path.join(SCRATCH_DIR,"{sample}_bowtie_unmapped_genome.fq"),
    message: "Aligning reads of sample {wildcards.sample} with bowtie2 to genome"
    shell:   "bowtie2 {BOWTIE_PARAMS} -x {SCRATCH_DIR}/genome -U {input.fq} --un {output.unmapped} |\
              samtools view -bS - | samtools sort -  {SCRATCH_DIR}/{wildcards.sample}_bowtie_aln_genome"


########################################################################
rule create_bowtie_index_for_xrna:
    input:   ION_RRNA_SEQS
    output:  os.path.join(SCRATCH_DIR,"xrna.1.bt2"),
             os.path.join(SCRATCH_DIR,"xrna.2.bt2"),
             os.path.join(SCRATCH_DIR,"xrna.3.bt2"),
             os.path.join(SCRATCH_DIR,"xrna.4.bt2"),
             os.path.join(SCRATCH_DIR,"xrna.rev.1.bt2"),
             os.path.join(SCRATCH_DIR,"xrna.rev.2.bt2")
    message: "Creating bowtie2 index for sequence database for xrna."
    shell:   "bowtie2-build -f {input} {SCRATCH_DIR}/xrna >> {SCRATCH_DIR}/Bowtie2-build.stdout"

########################################################################
rule create_bowtie_index_for_genome:
    input:   GENOME
    output:  os.path.join(SCRATCH_DIR,"genome.1.bt2"),
             os.path.join(SCRATCH_DIR,"genome.2.bt2"),
             os.path.join(SCRATCH_DIR,"genome.3.bt2"),
             os.path.join(SCRATCH_DIR,"genome.4.bt2"),
             os.path.join(SCRATCH_DIR,"genome.rev.1.bt2"),
             os.path.join(SCRATCH_DIR,"genome.rev.2.bt2")
    message: "Creating bowtie2 index for sequence database for genome."
    shell:   "bowtie2-build -f {input} {SCRATCH_DIR}/genome >> {SCRATCH_DIR}/Bowtie2-build.stdout"


########################################################################
rule align_with_star:
#  switch input to use untrimmed data. 
#    input: fq=os.path.join(FQ_DIR,"{sample}.fastq"),
    input: fq=os.path.join(SCRATCH_DIR,"{sample}_nospike.fastq"),
           dir=os.path.join(SCRATCH_DIR,"STAR_{sample}",DIR_E),
           idx=os.path.join(SCRATCH_DIR,"Genome")
    output: mapped=os.path.join(SCRATCH_DIR,"{sample}_aligned_STAR.bam"),
            unmapped=os.path.join(SCRATCH_DIR,"{sample}_STAR_unmapped.fq")
    message: "Aligning reads of sample {wildcards.sample} to Genome with STAR"
    shell:
        """
           {STAR_BIN} --outFileNamePrefix {SCRATCH_DIR}/STAR_{wildcards.sample}/ --outStd SAM --genomeDir {SCRATCH_DIR} \
                      --runThreadN 12 --readFilesIn {input.fq} --outSAMunmapped unmappedSTAR_{wildcards.sample}.sam \
                      --outReadsUnmapped Fastx --chimSegmentMin 18 --chimScoreMin 12 |  \
           samtools view -bS -   | samtools sort - {SCRATCH_DIR}/{wildcards.sample}_aligned_STAR
           mv {SCRATCH_DIR}/STAR_{wildcards.sample}/Unmapped.out.mate1 {output.unmapped}
        """


########################################################################
rule align_with_spikes:
    input:   os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq")
    output:  mapping=os.path.join(SCRATCH_DIR,"{sample}_spike_aln.sam")
             unmapped=os.path.join(SCRATCH_DIR,"{sample}_nospike.fastq")
    message: "Aligning reads of sample {wildcards.sample} to spike sequences."
    shell:   "bowtie2 {BOWTIE_PARAMS_SPIKE} -x {SPIKES_REF} -U {input} -S {output.mapping} --un {output.unmapped}"


########################################################################
rule gen_star_index:
    input: fasta=GENOME,
           annot=GENOME_GTF
    output: os.path.join(SCRATCH_DIR,"Genome")
    message: "Generating STAR index"
    shell:
        """
            {STAR_BIN} --runThreadN 12 --runMode genomeGenerate --genomeDir {SCRATCH_DIR} --genomeFastaFiles {input.fasta} --sjdbGTFfile {input.annot}  --sjdbOverhang 75 
        """

rule download_genome:
   output: {GENOME}
   shell:
      """
        curl {GENOME_URL} | gunzip -c  > {output} 
      """

rule download_gtf:
   output: {GENOME_GTF}
   shell:
      """
        curl {GENOME_GTF_URL} | gunzip -c >  {output} 
      """

rule read_lenplot: 
      input:  (SCRATCH_DIR+"/{sample}_{rc}_readlencount.txt".format(sample=s,rc="{rclass}") for s in SAMPLES)
      output: os.path.join(RESULT_DIR,"{rclass}_readlencount.png")
      params: samples=("{sample}".format(sample=s) for s in SAMPLES)
      run: R("""
          files=strsplit("{input}"," ")[[1]]
          samples=strsplit("{params.samples}"," ")[[1]]
          cols = rainbow(length(samples))
              png("{output}",width=1024,height=840)
               ct <- read.table(files[1]);
               plot(ct[,c(2,1)],t='l',xlab="read length",ylab="count",col=cols[1])
               for (i in 2:length(files)) {{ 
                 ct <- read.table(files[i]);
                 lines(ct[,c(2,1)],t='l',col=cols[i])
              }}
              legend("topright",samples,col=cols,pch=20)
              dev.off();
            """)

rule trim_read: 
    input: os.path.join(FQ_DIR,"{sample}.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq")
    shell:
       """
          java -jar {TRIMMOMATIC_JAR} SE {input} {output}  LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:25
       """

rule trimmed_read_lendist: 
    input: os.path.join(SCRATCH_DIR,"{sample}_trimmed.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_trimmed_readlencount.txt")
    shell: 
       """
         awk 'BEGIN {{cnt=0}} {{cnt=(cnt %4) +1}} cnt==2 {{print length($0)}}'  {input} | sort -n | uniq -c  > {output} 
       """

rule read_lendist: 
    input: os.path.join(FQ_DIR,"{sample}.fastq")
    output: os.path.join(SCRATCH_DIR,"{sample}_raw_readlencount.txt")
    shell: 
       """
         awk 'BEGIN {{cnt=0}} {{cnt=(cnt %4) +1}} cnt==2 {{print length($0)}}'  {input} | sort -n | uniq -c  > {output} 
       """

########################################################################
rule bamtofastq:
    input: os.path.join(FQ_DIR,"{sample}.bam")
    output: os.path.join(SCRATCH_DIR,"{sample}.fastq")
    message: "Translating bam to fastq" 
    shell:
       """
         bamToFastq  -fq {output} -i {input}
       """

########################################################################
rule create_dir:
    output:  os.path.join("{s}",DIR_E)
    message: "Create directory {wildcards.s}"
    shell:   "mkdir -p {wildcards.s}; touch {output} "
