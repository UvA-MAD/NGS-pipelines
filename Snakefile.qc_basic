# Snakefile for basicQC NGS 
import pandas as pd
from snakemake.utils import R

DESIGN_FILE = "seqdesign.txt"

PROJECT_DIR  = "../.."
RESULT_DIR   = os.path.join(PROJECT_DIR,"Results/basicQC")
FASTQ_STORE  = os.path.join(PROJECT_DIR,"Scratch/raw")
RUN_STORE    = "/mad/MAD-RBAB/04_MAD-RBAB-runs/data"

KNIT_BASE = "basicQC"
RMD_FILE = KNIT_BASE + ".Rmd"
MD_FILE = os.path.join(RESULT_DIR,KNIT_BASE + ".md")
HTML_FILE = os.path.join(RESULT_DIR,KNIT_BASE + ".html")
KNIT_FIGDIR = os.path.join(RESULT_DIR,"figure")
DIR_E = ".dexist"


#  get sample names from design file
if  not os.path.exists(DESIGN_FILE):
     sys.exit("Design file "+DESIGN_FILE+" does not exist")

df = pd.read_csv(DESIGN_FILE, sep="\t")
colnames = list(df.columns)
colnames[0] = colnames[0].lower()
df.columns = colnames

if not 'sampleid' in colnames: 
     sys.exit("Design file "+DESIGN_FILE+" does not contain << sampleid >> column")

if not df['sampleid'].dtype == 'O': 
     sys.exit("No numeric sample-id's allowed update designfile: "+DESIGN_FILE)
 
SAMPLES = [str(sample) for sample in list(set(df['sampleid']))]

FASTQS = [ os.path.join(FASTQ_STORE, s + ".fastq") for s in SAMPLES]

rule all:
    input: HTML_FILE
    message: "basic QC done!"

rule bootstrap:
    input: MD_FILE
    output: HTML_FILE
    message: "Bootstraping report"
    run: R("""
            library(knitrBootstrap);
            knit_bootstrap_md("{input}")
           """)

rule knit:
    input: FASTQS,
           imgdir=os.path.join(KNIT_FIGDIR,DIR_E)
    output: md=MD_FILE
    message: "Knitting report"
    run: R("""
            library(knitr);
            figpath <- "{KNIT_FIGDIR}"
            fq.path <- "{FASTQ_STORE}"
            design.file <- "{DESIGN_FILE}"
            opts_knit$set(base.dir = "{RESULT_DIR}")
            knit("{RMD_FILE}", output = "{output.md}",quiet=TRUE)
           """)

rule get_fq:
    input: DESIGN_FILE
    output: FASTQS
    message: "Importing fastq from bam"
    shell: "python get_experiment_fq.py -d {DESIGN_FILE} -s {RUN_STORE} -a {FASTQ_STORE} -n 1"

rule create_dir:
    output:  os.path.join("{s}",DIR_E)
    message: "Create directory {wildcards.s}"
    shell:   "mkdir -p {wildcards.s}; touch {output} "

